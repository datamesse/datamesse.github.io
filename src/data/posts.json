[{"id":1633183200,"title":"Import time zone offsets and observations from Wikipedia in Power BI\r","date":"October 3, 2021\r","content":"\r\nHow to use Power BI to scrape Wikipedia pages and create a data source for UTC time zone offsets and daylight saving observation anchors (e.g. the first Sunday of October).\r\n\r\nHere we will be importing Wikipedia table data from 2 different pages. The first example contains structured data values requiring minimal data cleaning. The second contains data which requires disaggregation of qualitative information to make it more quantitative.\r\n\r\nTime zone offset hours\r\n[https://en.wikipedia.org/wiki/List_of_tz_database_time_zones](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)\r\n\r\n![Wikipedia List of tz database time zones](https://raw.githubusercontent.com/datamesse/datamesse.github.io/main/src/assets-blog/2021-10-03--01.png?raw=true)\r\n\r\nDaylight Saving observation period anchors\r\n[https://en.wikipedia.org/wiki/Daylight_saving_time_by_country](https://en.wikipedia.org/wiki/Daylight_saving_time_by_country)\r\n\r\n![Wikipedia Daylight saving time by country](https://raw.githubusercontent.com/datamesse/datamesse.github.io/main/src/assets-blog/2021-10-03--02.png?raw=true)\r\n\r\n**Exercise 1:**\r\n\r\nBeginning with the time zone offset hours, we Get Data from Web and provide the URL.\r\n\r\n![Power BI Import data from a web page](https://raw.githubusercontent.com/datamesse/datamesse.github.io/main/src/assets-blog/2021-10-03--03.png?raw=true)\r\n\r\nSelect the Basic option. The intention is to export the results to Excel, as opposed to a live ongoing connection. This is to mitigate problems regarding source page changes and connection delays.\r\n\r\n![Power BI Import data Basic setting and set URL](https://raw.githubusercontent.com/datamesse/datamesse.github.io/main/src/assets-blog/2021-10-03--04.png?raw=true)\r\n\r\nThe HTML table we are after is the list containing the offsets.\r\nTick it, then click Transform Data.\r\n\r\n![Power BI Import data web page table selection](https://raw.githubusercontent.com/datamesse/datamesse.github.io/main/src/assets-blog/2021-10-03--05.png?raw=true)\r\n\r\nNext we Use First Row as Headers to assign the column names.\r\n\r\n![Power Query Use First Row as Headers](https://raw.githubusercontent.com/datamesse/datamesse.github.io/main/src/assets-blog/2021-10-03--06.png?raw=true)\r\n\r\nThen we add new custom columns to substitute existing columns to clean the data.\r\n\r\nFirst we add a new column to substitute the TZ database name column, replacing the single forward slashes “/” with forward slashes surrounded by spaces “ / “, and replace the underscores “_” with spaces “ “, for readability.\r\n\r\n```\r\nText.Replace(Text.Replace([TZ database name],\"/\", \", \"),\"_\",\" \")\r\n```\r\n\r\n![Power Query Replace text to make more readable](https://raw.githubusercontent.com/datamesse/datamesse.github.io/main/src/assets-blog/2021-10-03--07.png?raw=true)\r\n\r\nSecondly, the data source’s offsets use a different dash character \"−\" (slightly longer) from the mathematical operator \"-\" (shorter), so we need to create custom columns to substitute the longer dash with the shorter one.\r\n\r\nFor the Standard UTC offset:\r\n\r\n```\r\nText.Replace([#\"UTC offset ±hh:mm\"],\"−\",\"-\")\r\n```\r\n![Power Query Custom Column: Standard UTC offset](https://raw.githubusercontent.com/datamesse/datamesse.github.io/main/src/assets-blog/2021-10-03--08.png?raw=true)\r\n\r\nFor the Daylight Saving UTC offset:\r\n\r\n```\r\nText.Replace([#\"UTC DST offset ±hh:mm\"],\"−\",\"-\")\r\n```\r\n![Power Query Custom Column: Daylight Saving UTC offset](https://raw.githubusercontent.com/datamesse/datamesse.github.io/main/src/assets-blog/2021-10-03--09.png?raw=true)\r\n\r\nNow to add a column that shows the difference between the standard and daylight savings offsets.\r\nThe nature of the data means you cannot subtract them in a simple way.\r\nComments are included in the code to explain what is occurring.\r\n\r\n```\r\n/* If the offsets are identical, it may imply no Daylight Saving observed */\r\nif [Standard UTC offset] = [Daylight Saving UTC offset]\r\nthen 0\r\n\r\n/* If minutes are the same and aren't zero, just subtract hours */\r\nelse if (Text.End([Standard UTC offset],2) <> \"00\" or \r\nText.End([Daylight Saving UTC offset],2) <> \"00\") and Text.End([Standard UTC offset],2) = Text.End([Daylight Saving UTC offset],2)\r\nthen Number.FromText(Text.Range([Daylight Saving UTC offset],0,3)) - Number.FromText(Text.Range([Standard UTC offset],0,3))\r\n\r\n/* If minutes are different and either of them aren't zero, convert minutes to proper decimals, subtract, then convert minutes back */\r\nelse if (Text.End([Standard UTC offset],2) <> \"00\" or \r\nText.End([Daylight Saving UTC offset],2) <> \"00\") and Text.End([Standard UTC offset],2) <> Text.End([Daylight Saving UTC offset],2)\r\nthen (Number.FromText(Text.Range([Daylight Saving UTC offset],1,2)) + (Number.FromText(Text.End([Daylight Saving UTC offset],2)) / 60)) - (Number.FromText(Text.Range([Standard UTC offset],1,2)) + (Number.FromText(Text.End([Standard UTC offset],2)) / 60))\r\n\r\n/* Standard expectation that difference is only in the hour values */\r\nelse Number.FromText(Text.Range([Daylight Saving UTC offset],1,2)) - Number.FromText(Text.Range([Standard UTC offset],1,2))\r\n```\r\n\r\n![Power Query Custom Column: Offset difference](https://raw.githubusercontent.com/datamesse/datamesse.github.io/main/src/assets-blog/2021-10-03--10.png?raw=true)\r\n\r\nNext we filter out the data rows not required, starting with only including Canonical status offsets\r\n\r\n![Power Query Filter for Canonical records](https://raw.githubusercontent.com/datamesse/datamesse.github.io/main/src/assets-blog/2021-10-03--11.png?raw=true)\r\n\r\nThen we filter for time zones that have a country code.\r\n\r\n![Power Query Filter for country codes](https://raw.githubusercontent.com/datamesse/datamesse.github.io/main/src/assets-blog/2021-10-03--12.png?raw=true)\r\n\r\nLastly, remove columns that won’t be needed, depending on what you need for your data source.\r\n\r\n![Power Query Remove other columns](https://raw.githubusercontent.com/datamesse/datamesse.github.io/main/src/assets-blog/2021-10-03--13.png?raw=true)\r\n\r\nIn my scenario, I want to retain this data separately in an Excel file, so I create a table in Power BI with all the columns, then Export.\r\n\r\n![Power BI Export table results](https://raw.githubusercontent.com/datamesse/datamesse.github.io/main/src/assets-blog/2021-10-03--14.png?raw=true)\r\n\r\n\r\n\r\n**Exercise 2:**\r\n\r\nFor our second dataset, we need to retrieve the relative anchors for daylight saving periods using the second URL: [https://en.wikipedia.org/wiki/Daylight_saving_time_by_country](https://en.wikipedia.org/wiki/Daylight_saving_time_by_country)\r\n\r\n![Power BI Import data Basic setting and set URL](https://raw.githubusercontent.com/datamesse/datamesse.github.io/main/src/assets-blog/2021-10-03--15.png?raw=true)\r\n\r\nAgain, click Transform Data and Use First Row as Headers.\r\n\r\n![Power BI Import data web page table selection](https://raw.githubusercontent.com/datamesse/datamesse.github.io/main/src/assets-blog/2021-10-03--16.png?raw=true)\r\n\r\n![Power Query Use First Row as Headers](https://raw.githubusercontent.com/datamesse/datamesse.github.io/main/src/assets-blog/2021-10-03--17.png?raw=true)\r\n\r\nNext we filter for records with a valid current DST start value.\r\n\r\n![Power Query Filter for valid DST start](https://raw.githubusercontent.com/datamesse/datamesse.github.io/main/src/assets-blog/2021-10-03--18.png?raw=true)\r\n\r\nThe problem with this dataset is that the DST start and DST end columns are not quantified at a low enough level to be easily worked with. Revising these columns, we can see value commonalities that can be separated out into custom columns as declartive “anchors” for each daylight saving period’s start and end.\r\n\r\nThis includes:\r\n* Positions (i.e. first, second, third, fourth, last)\r\n* Weekday names\r\n* Month names\r\n* “UTC” prefixed with a specific UTC time (e.g. 01:00 UTC), or prefixed with a non-UTC time (e.g. 002:00 AST (UTC-4)\r\n* Phrases “local standard time” and “local daylight saving time” prefixed with a time\r\n\r\n![Power Query Exploring qualitative data values](https://raw.githubusercontent.com/datamesse/datamesse.github.io/main/src/assets-blog/2021-10-03--19.png?raw=true)\r\n\r\nThe custom columns are base conditions that check for substrings and substitute them with numerical data where possible, so they can be referenced by other custom functions.\r\n\r\nWe’ll begin with the position-related column.\r\n\r\nEvery day has at least four occurrences in each month, but the “last” position could either be the fourth or fifth occurrence of that day. I chose to use an arbitrary value of 9 for the output of last, given 5 could possibly be used for the fifth instance of the day. Note: With this particular dataset, neither Fourth nor Fifth occur, so they can be omitted here if you want.\r\n\r\n```\r\nif Text.Contains([DST start], \"First\")\r\nthen 1\r\nelse if Text.Contains([DST start], \"Second\")\r\nthen 2\r\nelse if Text.Contains([DST start], \"Third\")\r\nthen 3\r\nelse if Text.Contains([DST start], \"Fourth\")\r\nthen 4\r\nelse if Text.Contains([DST start], \"Fifth\")\r\nthen 5\r\nelse if Text.Contains([DST start], \"Last\")\r\nthen 9\r\nelse null\r\n```\r\n\r\n![Power Query Custom Column: DST start position anchor](https://raw.githubusercontent.com/datamesse/datamesse.github.io/main/src/assets-blog/2021-10-03--20.png?raw=true)\r\n\r\nNext to create a custom column for the weekdays, using Power Query’s Day functions, which translate as numbers from 0 for Sunday to 6 for Saturday.\r\n\r\n```\r\nif Text.Contains([DST start], \"Sunday\")\r\nthen Day.Sunday\r\nelse \r\nif Text.Contains([DST start], \"Monday\")\r\nthen Day.Monday\r\nelse \r\nif Text.Contains([DST start], \"Tuesday\")\r\nthen Day.Tuesday\r\nelse \r\nif Text.Contains([DST start], \"Wednesday\")\r\nthen Day.Wednesday\r\nelse \r\nif Text.Contains([DST start], \"Thursday\")\r\nthen Day.Thursday\r\nelse \r\nif Text.Contains([DST start], \"Friday\")\r\nthen Day.Friday\r\nelse \r\nif Text.Contains([DST start], \"Saturday\")\r\nthen Day.Saturday\r\nelse null\r\n```\r\n\r\n![Power Query Custom Column: DST start day anchor](https://raw.githubusercontent.com/datamesse/datamesse.github.io/main/src/assets-blog/2021-10-03--21.png?raw=true)\r\n\r\nWe repeat with similar logic for the DST start field’s month anchor. At time of writing, Power Query has a function that converts month numbers to month names, but not the other way around.\r\n\r\n```\r\nif Text.Contains([DST start], \"January\")\r\nthen 1\r\nelse if Text.Contains([DST start], \"February\")\r\nthen 2\r\nelse if Text.Contains([DST start], \"March\")\r\nthen 3\r\nelse if Text.Contains([DST start], \"April\")\r\nthen 4\r\nelse if Text.Contains([DST start], \"May\")\r\nthen 5\r\nelse if Text.Contains([DST start], \"June\")\r\nthen 6\r\nelse if Text.Contains([DST start], \"July\")\r\nthen 7\r\nelse if Text.Contains([DST start], \"August\")\r\nthen 8\r\nelse if Text.Contains([DST start], \"September\")\r\nthen 9\r\nelse if Text.Contains([DST start], \"October\")\r\nthen 10\r\nelse if Text.Contains([DST start], \"November\")\r\nthen 11\r\nelse if Text.Contains([DST start], \"December\")\r\nthen 12\r\nelse null\r\n```\r\n\r\n![Power Query Custom Column: DST start month anchor](https://raw.githubusercontent.com/datamesse/datamesse.github.io/main/src/assets-blog/2021-10-03--22.png?raw=true)\r\n\r\nLastly, we will pull where a UTC time is specified. There are entries where a local time with its UTC offset value is provided, but since these entries are few and complex to manage, I will edit the export result afterward to account for these. It’s a cost vs benefit juggle.\r\n\r\n```\r\nif Text.Contains([DST start], \" UTC\") then Text.Range([DST start], Text.PositionOf([DST start],\" UTC\") - 5, 5) else null\r\n```\r\n\r\n![Power Query Custom Column: DST start UTC time anchor](https://raw.githubusercontent.com/datamesse/datamesse.github.io/main/src/assets-blog/2021-10-03--23.png?raw=true)\r\n\r\nRinse-and-repeat the creation of those anchor columns. An alternative is creating a custom function to make it easier to manage later on.\r\n\r\n![Power Query Custom Columns for DST end](https://raw.githubusercontent.com/datamesse/datamesse.github.io/main/src/assets-blog/2021-10-03--24.png?raw=true)\r\n\r\nThen we can retain the columns we need, such as Country/Territory, Notes, and the custom columns we created.\r\n\r\n![Power Query Remove other columns](https://raw.githubusercontent.com/datamesse/datamesse.github.io/main/src/assets-blog/2021-10-03--25.png?raw=true)\r\n\r\nLastly, as with the previous dataset, we will export this to Excel, and clean up the file from there, e.g. accounting for records that have a different data structure for their anchors, such as an exact date for day and month per year, and records that include local time, etc.\r\n\r\n![Power BI Export table results](https://raw.githubusercontent.com/datamesse/datamesse.github.io/main/src/assets-blog/2021-10-03--26.png?raw=true)\r\n\r\nAt this point, we typically would merge these datasets, similar to left outer joins in SQL. Unfortunately, the first dataset uses an incoherent structure for its time zone name values, e.g. _country, city_ or _region, city_ or _region, country, city_ etc., as opposed to the second data set, which only lists country.\r\n\r\n![Power Query Merge Queries](https://raw.githubusercontent.com/datamesse/datamesse.github.io/main/src/assets-blog/2021-10-03--27.png?raw=true)\r\n\r\nI tried fuzzy matching, but as at time of writing, it cannot connect a high enough number of the records, regardless of adjustments made to the accuracy.\r\n\r\n![Power Query Merge using fuzzy matching](https://raw.githubusercontent.com/datamesse/datamesse.github.io/main/src/assets-blog/2021-10-03--28.png?raw=true)\r\n\r\nAn alternative solution would be to create a list based on the second dataset’s county column, but this would neglect the _region, city_ joins from the first dataset. Another would be to find a third dataset to extend the other datasets and formulate a common column for the merge.\r\n\r\nIn my scenario, it would be more time efficient to do the mapping manually, as this dataset is small, and intended for a niche non-scaled need. I provided a copy of the end product to download as an Excel file [here](https://raw.githubusercontent.com/datamesse/datamesse.github.io/main/src/assets-blog/Time_zone_offsets_and_DST_observations.xlsx?raw=true). As a reminder, this is strictly an exercise file, and its data is not comprehensive nor accurate, so please be mindful of that if using it.\r\n\r\n![Manually cleaned output](https://raw.githubusercontent.com/datamesse/datamesse.github.io/main/src/assets-blog/2021-10-03--29.png?raw=true)\r\n\r\n[This post's markdown file in GitHub](https://github.com/datamesse/datamesse.github.io/blob/main/src/posts/2021-10-03.md)"},{"id":1632578400,"title":"Find date for the nth day of a month in Power BI\r","date":"September 26, 2021\r","content":"\r\nHow to use Power Query to find the date for the nth day of a month/year based on another date column (e.g. 3rd Tuesday of October 2021).\r\n\r\nIn Power BI this can be used for the conditional logic of other Custom Columns. For example, to create indicators that data rows occur on or fall between relative date ranges (e.g. Black Friday sales). The following involves adding a Custom Column in Power Query i.e. M code, not DAX.\r\n\r\nThis finds the first Monday of the month, where our dependent date column is OurDateField.\r\n\r\n```\r\nDate.FromText(Text.From(Date.Year([OurDateField])) & \"/10/\" & Text.From((7 - (Date.DayOfWeek(Date.FromText(Text.From(Date.Year([OurDateField])) & \"/10/1\"),Day.Monday)))))\r\n```\r\n\r\n![Power Query: 1st Sunday of month](https://raw.githubusercontent.com/datamesse/datamesse.github.io/main/src/assets-blog/2021-09-26--1.png?raw=true)\r\n\r\n**How it works**\r\n\r\nTo find the first Sunday of a specific month/year relative to another date, first establish the start of the month e.g. 1/10 (1st October), passing in the date field you are using e.g. [OurDateField], to append its year.\r\n\r\n```\r\nDate.FromText(Text.From(Date.Year([OurDateField])) & \"/10/1\")\r\n```\r\n\r\nIn this example, we are hard-coding October regardless of OurDateField’s month value, but if you need it to be relative to its month too, simply add an extra concatenation for month in the same way year is treated, i.e. using Date.Month().\r\n\r\nNow we need to identify what day of the week that this first day of the month is, using Date.DayOfWeek, and setting the optional parameter for what the start of the week is, as Day.Monday\r\n\r\n```\r\nDate.DayOfWeek(Date.FromText(Text.From(Date.Year([OurDateField])) & \"/10/1\"),Day.Monday)\r\n```\r\n\r\n![Power Query: Day of week number](https://raw.githubusercontent.com/datamesse/datamesse.github.io/main/src/assets-blog/2021-09-26--2.png?raw=true)\r\n\r\n \r\nIn this example, 1st October 2021 is a Friday, and Friday’s day number is 4 (with Monday being 0).\r\n\r\n![Calendar: Weekday of 1st day of month](https://raw.githubusercontent.com/datamesse/datamesse.github.io/main/src/assets-blog/2021-09-26--3.png?raw=true)\r\n\r\nIf you do not provide the Day.Monday parameter, it will default to Day.Monday in the background. If another parameter is used e.g. Day.Sunday, then the assignment numbers will change.\r\n\r\nNow we subtract the weekday number 4 from 7, and get 3, which is the first Sunday’s date.\r\n\r\n```\r\n7 - (Date.DayOfWeek(Date.FromText(Text.From(Date.Year([OurDateField])) & \"/10/1\"),Day.Monday))\r\n```\r\n\r\n![Power Query: Date of 1st Sunday](https://raw.githubusercontent.com/datamesse/datamesse.github.io/main/src/assets-blog/2021-09-26--4.png?raw=true)\r\n\r\nThen concatenate this with the year month retrieved earlier\r\n\r\n```\r\nDate.FromText(Text.From(Date.Year([OurDateField])) & \"/10/\" & Text.From((7 - (Date.DayOfWeek(Date.FromText(Text.From(Date.Year([OurDateField])) & \"/10/1\"),Day.Monday)))))\r\n```\r\n\r\n![Power Query: Concatenate the month year to the date](https://raw.githubusercontent.com/datamesse/datamesse.github.io/main/src/assets-blog/2021-09-26--5.png?raw=true)\r\n\r\nIf you need to change the weekday that Power Query needs to find, simply increment the Day.Monday parameter to the following day of the desired weekday.\r\n\r\nFor example, if you want to find the first Wednesday, change the parameter to Day.Thursday.\r\n\r\n```\r\nDate.FromText(Text.From(Date.Year([OurDateField])) & \"/10/\" & Text.From((7 - (Date.DayOfWeek(Date.FromText(Text.From(Date.Year([OurDateField])) & \"/10/1\"),Day.Thursday)))))\r\n```\r\n\r\n![Power Query: 1st Wednesday of month](https://raw.githubusercontent.com/datamesse/datamesse.github.io/main/src/assets-blog/2021-09-26--6.png?raw=true)\r\n\r\n![Calendar: 1st Wednesday of the month](https://raw.githubusercontent.com/datamesse/datamesse.github.io/main/src/assets-blog/2021-09-26--7.png?raw=true)\r\n\r\nIf you need to change the position from first, to second, third, or fourth Sunday, simply add 7 for the second, 14 for the third, and 21 for the fourth.\r\n\r\nFor example, we will retrieve the 3rd Sunday.\r\n\r\n```\r\nDate.FromText(Text.From(Date.Year([OurDateField])) & \"/10/\" & Text.From((7 - (Date.DayOfWeek(Date.FromText(Text.From(Date.Year([OurDateField])) & \"/10/1\"),Day.Monday)) + 14 )))\r\n```\r\n\r\n![Calendar: 3rd Sunday of the month](https://raw.githubusercontent.com/datamesse/datamesse.github.io/main/src/assets-blog/2021-09-26--8.png?raw=true)\r\n\r\n\r\n[This post's markdown file in GitHub](https://github.com/datamesse/datamesse.github.io/blob/main/src/posts/2021-09-26.md)"}]